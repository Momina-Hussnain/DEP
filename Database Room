@Entity(tableName = "tasks")
public class Task {
    @PrimaryKey(autoGenerate = true)
    private int id;
    private String name;
    private String description;
    private String dueDate;
    private String category;

    // Getters and setters

}
@Dao
public interface TaskDao {
    @Query("SELECT * FROM tasks ORDER BY dueDate DESC")
    List<Task> getAllTasks();

    @Insert
    void insert(Task task);

    @Update
    void update(Task task);

    @Delete
    void delete(Task task);
}public class MainActivity extends AppCompatActivity {
    private RecyclerView recyclerView;
    private TaskAdapter adapter;
    private FloatingActionButton fab;
    private AppDatabase db;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        recyclerView = findViewById(R.id.recyclerView);
        fab = findViewById(R.id.fab);

        db = AppDatabase.getDatabase(getApplicationContext());
        recyclerView.setLayoutManager(new LinearLayoutManager(this));

        new AsyncTask<Void, Void, List<Task>>() {
            @Override
            protected List<Task> doInBackground(Void... voids) {
                return db.taskDao().getAllTasks();
            }

            @Override
            protected void onPostExecute(List<Task> tasks) {
                super.onPostExecute(tasks);
                adapter = new TaskAdapter(tasks);
                recyclerView.setAdapter(adapter);
            }
        }.execute();

        fab.setOnClickListener(view -> {
            Intent intent = new Intent(MainActivity.this, AddEditTaskActivity.class);
            startActivity(intent);
        });
    }public class AddEditTaskActivity extends AppCompatActivity {
    private EditText editTextTaskName;
    private EditText editTextTaskDescription;
    private EditText editTextTaskDueDate;
    private EditText editTextTaskCategory;
    private Button buttonSaveTask;
    private AppDatabase db;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_edit_task);

        editTextTaskName = findViewById(R.id.editTextTaskName);
        editTextTaskDescription = findViewById(R.id.editTextTaskDescription);
        editTextTaskDueDate = findViewById(R.id.editTextTaskDueDate);
        editTextTaskCategory = findViewById(R.id.editTextTaskCategory);
        buttonSaveTask = findViewById(R.id.buttonSaveTask);

        db = AppDatabase.getDatabase(getApplicationContext());

        buttonSaveTask.setOnClickListener(view -> {
            final Task task = new Task();
            task.setName(editTextTaskName.getText().toString());
            task.setDescription(editTextTaskDescription.getText().toString());
            task.setDueDate(editTextTaskDueDate.getText().toString());
            task.setCategory(editTextTaskCategory.getText().toString());

            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    db.taskDao().insert(task);
                    return null;
                }

                @Override
                protected void onPostExecute(Void aVoid) {
                    super.onPostExecute(aVoid);
                    finish();
                }
            }.execute();
        });
    }
}
public class TaskAdapter extends RecyclerView.Adapter<TaskAdapter.TaskViewHolder> {
    private List<Task> tasks;

    public TaskAdapter(List<Task> tasks) {
        this.tasks = tasks;
    }

    @NonNull
    @Override
    public TaskViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.task_item, parent, false);
        return new TaskViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull TaskViewHolder holder, int position) {
        Task task = tasks.get(position);
        holder.textViewTaskName.setText(task.getName());
        holder.textViewTaskDueDate.setText(task.getDueDate());
        holder.textViewTaskCategory.setText(task.getCategory());
    }

    @Override
    public int getItemCount() {
        return tasks.size();
    }

    public static class TaskViewHolder extends RecyclerView.ViewHolder {
        public TextView textViewTaskName;
        public TextView textViewTaskDueDate;
        public TextView textViewTaskCategory;

        public TaskViewHolder(@NonNull View itemView) {
            super(itemView);
            textViewTaskName = itemView.findViewById(R.id.textViewTaskName);
            textViewTaskDueDate = itemView.findViewById(R.id.textViewTaskDueDate);
            textViewTaskCategory = itemView.findViewById(R.id.textViewTaskCategory);
        }
    }
}
}
